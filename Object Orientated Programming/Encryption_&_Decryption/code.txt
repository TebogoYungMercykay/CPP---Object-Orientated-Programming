#include "Controller.h"
#include "DarkBlueBabushka.h"
#include "LightBlueBabushka.h"
#include "GoldBabushka.h"
#include "GreenBabushka.h"
#include "RedBabushka.h"
#include "YellowBabushka.h"
#include "ReturnStruct.h"
#include "ControllerException.h"

#include <string>
#include <iostream>
#include <cstring>
#include <fstream>
#include <sstream>

using namespace std;

Controller::Controller(string filepath)
{   fstream my_InputFile;
    my_InputFile.open(filepath.c_str());

    string holder_thingie;
    getline(my_InputFile,holder_thingie);


    stringstream ss_temp1 (holder_thingie);
    getline(ss_temp1,holder_thingie,':');
    ss_temp1>>this->numBabushkas;

    this->babushkaArr=new Babushka*[this->numBabushkas];

    int counter_var = 0;
    
    while(getline(my_InputFile,holder_thingie)){
        if(counter_var<this->numBabushkas)
        {
            stringstream ss_temp (holder_thingie);
            unsigned int temp_un=0;
            getline(ss_temp,holder_thingie,':');
            if(holder_thingie == "yellow")
            {
                getline(ss_temp,holder_thingie);
                unsigned char* my_array=new unsigned char[10];
                int k_var=0;
                while(k_var<10){my_array[k_var]=holder_thingie[k_var];k_var++;}
                this->babushkaArr[counter_var] = new YellowBabushka(my_array);
                counter_var+=1;
            }
            else
            {
                string lastVue="";
                string temp ="";
                getline(ss_temp,holder_thingie,':');
                getline(ss_temp,lastVue);
                unsigned char* my_array=new unsigned char[10];
                for(int k=0;k<10;k++)my_array[k]=holder_thingie[k];

                if(holder_thingie=="gold")
                {
                    stringstream k_temp_int(lastVue);
                    k_temp_int>>temp_un;
                    this->babushkaArr[counter_var] = new GoldBabushka(my_array,temp_un);
                    counter_var+=1;
                }
                else if(holder_thingie=="green")
                {
                    stringstream k_temp_int(lastVue);
                    k_temp_int>>temp_un;
                    this->babushkaArr[counter_var] = new GreenBabushka(my_array,temp_un);
                    counter_var+=1;
                }
                else if(holder_thingie=="red")
                {
                    stringstream k_temp_int(lastVue);
                    k_temp_int>>temp_un;
                    this->babushkaArr[counter_var] = new RedBabushka(my_array,temp_un);
                    counter_var+=1;
                }
                else if(holder_thingie=="lightblue")
                {
                    stringstream k_temp_int(lastVue);
                    k_temp_int>>temp_un;
                    this->babushkaArr[counter_var] = new LightBlueBabushka(my_array,temp_un);
                    counter_var+=1;
                }
                else if(holder_thingie=="darkblue")
                {
                    stringstream k_temp_int(lastVue);
                    k_temp_int>>temp_un;
                    this->babushkaArr[counter_var] = new DarkBlueBabushka(my_array,temp_un);
                    counter_var+=1;
                }
            }
        }
    }
    my_InputFile.close();
}

Controller::~Controller()
{   for(int i = 0; i < this->numBabushkas; i++)delete this->babushkaArr[i];
    delete [] this->babushkaArr;
    this->babushkaArr = NULL;
}

ReturnStruct Controller::expandArray(unsigned char* array, int currentSize, const unsigned char* id, int idSize)
{   int newSize = currentSize + 2*idSize;
    unsigned char* newArray = new unsigned char[newSize];
    for(int i = idSize, j = 0; i < idSize + currentSize; i++, j++)newArray[i] = array[j];
    delete array;
    array = NULL;
    for(int i = 0; i < idSize; i++)newArray[i] = id[i];
    for(int i = idSize + currentSize, j = 0; i < newSize; i++, j++)newArray[i] = id[j];

    ReturnStruct stre;
    stre.arraySize = newSize;
    stre.returnArray = newArray;
    return stre;
}

ReturnStruct Controller::reduceArray(unsigned char* array, int currentSize, const unsigned char* expectedId, int idSize)
{   int newSize = currentSize - (idSize * 2);
    ReturnStruct stre;
    unsigned char* newArray = new unsigned char[newSize];
    bool match = true;
    for(int i = 0; i < idSize; i++)
    {   if(array[i] != expectedId[i])
        {match = false;
            break;}}
    if(newSize <= -1)throw ControllerException("size exception");
    else if(!match)throw ControllerException("id mismatch exception");
    else
    {   for(int i = idSize, j = 0; i < currentSize - idSize; i++, j++)newArray[j] = array[i];
        delete array;
        array = NULL;
        stre.arraySize = newSize;
        stre.returnArray = newArray;
        return stre;}
    return stre;
}

ReturnStruct Controller::encrypt(const unsigned char* array, int size)
{   try
    {   unsigned char* copy = new unsigned char[size];
        int i=0;
        while( i < size){copy[i] = array[i];i++;}
        this->printArray(copy, size);
        ReturnStruct stre;
        stre.arraySize = size;
        stre.returnArray = copy;
        i=0;
        while(i < this->numBabushkas)
        {   stre = this->expandArray(stre.returnArray, stre.arraySize, this->babushkaArr[i]->getId(), this->babushkaArr[i]->getIdLength());
            this->babushkaArr[i]->encrypt(stre.returnArray, stre.arraySize);
            this->printArray(stre.returnArray, stre.arraySize);
            i++;}
        return stre;
    }
    catch(BabushkaException& exception){throw ControllerException(exception, "encrypt exception");}

}

ReturnStruct Controller::decrypt(const unsigned char* array, int size)
{   try
    {   unsigned char* copy = new unsigned char[size];
        int i=0;
        while( i < size){copy[i] = array[i];i++;}
        this->printArray(copy, size);
        ReturnStruct stre;
        stre.arraySize = size;
        stre.returnArray = copy;
        i=this->numBabushkas - 1;
        while(i >= 0)
        {   this->babushkaArr[i]->decrypt(stre.returnArray, stre.arraySize);
            stre = this->reduceArray(stre.returnArray, stre.arraySize, this->babushkaArr[i]->getId(), this->babushkaArr[i]->getIdLength());
            this->printArray(stre.returnArray, stre.arraySize);
            i--;}
        return stre;
    }
    catch(BabushkaException& exception){throw ControllerException(exception, "encrypt exception");}

}


void Controller::printArray(unsigned char* array, int size){
    
    cout << '[';
    for(int i = 0; i < size -1 ; i++)cout << array[i] << ',';
    cout << array[size-1];
    cout <<']';
    cout << endl;
}